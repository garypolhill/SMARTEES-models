extensions [ csv ]


;<summary>
;create the population of the model using information from the database
;</summary>
to Make-Sections-Population
    ;set mod-curve 0.2
    ;set mod-pos-curve 0 
  
  ;set mod-curve 0.23 
  ;set mod-pos-curve -0.15
  file-open "/BasesDeDatosHijos/BDPobleNouNetlogoHijos.csv"
  ;ignore first row
  let row (csv:from-row file-read-line ";")
  while [ not file-at-end? ] [
    set row (csv:from-row file-read-line ";")
    Make-Real-Population row
  ]
  file-close
  ;ask humats [hide-turtle]
  file-open population-csv
  ;ignore first row
  set row (csv:from-row file-read-line ";")
  while [ not file-at-end? ] [
    set row (csv:from-row file-read-line ";")
    Make-Simulated-Population row
  ]
  file-close
  
end


to Make-Real-Population [citizen-data]
  ; Set  importances
  create-humats 1 [
    set wellness-importance ((item 12 citizen-data) + (item 14 citizen-data) +  (item 17 citizen-data) +  (item 20 citizen-data) + (item 22 citizen-data) ) / 5
    set wellness-importance Normalized-Min-Max  wellness-importance 0 6 0 1
    
    set environmental-quality-importance ((item 13 citizen-data) + (item 15 citizen-data) +  (item 19 citizen-data) +  (item 23 citizen-data) + (item 24 citizen-data) + (item 25 citizen-data) + (item 31 citizen-data)) / 7
    set environmental-quality-importance Normalized-Min-Max environmental-quality-importance 0 6 0 1
    
    set comfort-importance ((item 16 citizen-data) + (item 18 citizen-data) + (item 21 citizen-data)) / 3
    set comfort-importance Normalized-Min-Max  comfort-importance 0 6 0 1
    
    set prestige-importance ((item 26 citizen-data) + (item 27 citizen-data)) / 2
    set prestige-importance Normalized-Min-Max  prestige-importance 0 6 0 1
    
    set participation-importance ((item 28 citizen-data) + (item 29 citizen-data) +  (item 30 citizen-data)) / 3
    set participation-importance  Normalized-Min-Max  participation-importance  0 6 0 1
    
    set social-importance random-float 1
    
    ; Set initial satisfactions for all BA ; excluding social dimension
    ;set wellness-satisfaction-A Normalized-Min-Max Random-Beta 4 4 0 1 -1 1
    set wellness-satisfaction-A ((item 33 citizen-data) + (item 37 citizen-data) +  (item 39 citizen-data)) / 3
    set wellness-satisfaction-A   Normalized-Min-Max  wellness-satisfaction-A   0 6 -1 1
    set wellness-satisfaction-A wellness-satisfaction-A + mod-pos-curve
    if wellness-satisfaction-A > 1 [ set wellness-satisfaction-A  1]
    if wellness-satisfaction-A < -1 [ set wellness-satisfaction-A  -1]
    
    set environmental-quality-satisfaction-A ((item 32 citizen-data) + (item 34 citizen-data) +  (item 36 citizen-data) +  (item 41 citizen-data)) / 4
    set environmental-quality-satisfaction-A  Normalized-Min-Max  environmental-quality-satisfaction-A  0 6 -1 1
    set environmental-quality-satisfaction-A  environmental-quality-satisfaction-A  + mod-pos-curve
    if environmental-quality-satisfaction-A > 1 [ set environmental-quality-satisfaction-A  1]
    if environmental-quality-satisfaction-A < -1 [ set environmental-quality-satisfaction-A  -1]
    
    set comfort-satisfaction-A ((item 35 citizen-data) + (item 38 citizen-data)) / 2
    set comfort-satisfaction-A  Normalized-Min-Max  comfort-satisfaction-A 0 6 -1 1
    set comfort-satisfaction-A  comfort-satisfaction-A  + mod-pos-curve
    if comfort-satisfaction-A > 1 [ set comfort-satisfaction-A  1]
    if comfort-satisfaction-A < -1 [ set comfort-satisfaction-A  -1]
    
    set prestige-satisfaction-A ((item 40 citizen-data) + (item 42 citizen-data)) / 2
    set prestige-satisfaction-A  Normalized-Min-Max  prestige-satisfaction-A  0 6 -1 1
    set prestige-satisfaction-A   prestige-satisfaction-A   + mod-pos-curve
    if prestige-satisfaction-A  > 1 [ set prestige-satisfaction-A   1]
    if prestige-satisfaction-A  < -1 [ set prestige-satisfaction-A   -1]
    
    set participation-satisfaction-A ((item 43 citizen-data) + (item 44 citizen-data)) / 2
    set participation-satisfaction-A  Normalized-Min-Max  participation-satisfaction-A  0 6 -1 1
    set participation-satisfaction-A   participation-satisfaction-A   + mod-pos-curve
    if participation-satisfaction-A > 1 [ set participation-satisfaction-A  1]
    if participation-satisfaction-A < -1 [ set participation-satisfaction-A  -1]
    
    set wellness-satisfaction-B (0 - wellness-satisfaction-A) +  mod-curve
    if wellness-satisfaction-B > 1 [ set wellness-satisfaction-B  1]
    if wellness-satisfaction-B < -1 [ set wellness-satisfaction-B  -1]
    set environmental-quality-satisfaction-B (0 - environmental-quality-satisfaction-A) + mod-curve
    if environmental-quality-satisfaction-B > 1 [ set environmental-quality-satisfaction-B  1]
    if environmental-quality-satisfaction-B < -1 [ set environmental-quality-satisfaction-B  -1]
    set comfort-satisfaction-B (0 - comfort-satisfaction-A + mod-curve)
    if comfort-satisfaction-B > 1 [ set comfort-satisfaction-B  1]
    if comfort-satisfaction-B < -1 [ set comfort-satisfaction-B  -1]
    set prestige-satisfaction-B (0 - prestige-satisfaction-A ) + mod-curve
    if prestige-satisfaction-B  > 1 [ set prestige-satisfaction-B   1]
    if prestige-satisfaction-B  < -1 [ set prestige-satisfaction-B   -1]
    set participation-satisfaction-B (0 - participation-satisfaction-A) + mod-curve
    if participation-satisfaction-B > 1 [ set participation-satisfaction-B  1]
    if participation-satisfaction-B < -1 [ set participation-satisfaction-B  -1]
    
    ;set influence parameters
    set friends-trust Normalized-Min-Max  (item 47 citizen-data) 0 6 0 1
    set adjacents-trust Normalized-Min-Max  (item 46 citizen-data) 0 6 0 1
    set city-council-trust Normalized-Min-Max  (item 48 citizen-data) 0 6 0 1
    set local-media-trust Normalized-Min-Max  (item 51 citizen-data) 0 6 0 1
    set original-local-media-trust local-media-trust
    set merchants-associations-trust Normalized-Min-Max  (item 50 citizen-data) 0 6 0 1
    set original-merchants-associations-trust merchants-associations-trust
    set other-associations-trust Normalized-Min-Max  (item 49 citizen-data) 0 6 0 1
    set original-other-associations-trust other-associations-trust
    set political-opposition-trust (1 - city-council-trust)
    
    ;Set evaluations for all BAs
    set wellness-evaluation-A wellness-importance * wellness-satisfaction-A
    set environmental-quality-evaluation-A environmental-quality-importance * environmental-quality-satisfaction-A
    set comfort-evaluation-A comfort-importance * comfort-satisfaction-A
    set prestige-evaluation-A prestige-importance * prestige-satisfaction-A
    set participation-evaluation-A participation-importance * participation-satisfaction-A
    
    set wellness-evaluation-B wellness-importance * wellness-satisfaction-B
    set environmental-quality-evaluation-B environmental-quality-importance * environmental-quality-satisfaction-B
    set comfort-evaluation-B comfort-importance * comfort-satisfaction-B
    set prestige-evaluation-B prestige-importance * prestige-satisfaction-B
    set participation-evaluation-B participation-importance * participation-satisfaction-B
    
    ;global satisfaction for all behavioural alternatives
    set satisfaction-A ((wellness-evaluation-A + environmental-quality-evaluation-A + comfort-evaluation-A + prestige-evaluation-A + participation-evaluation-A) / 5)
    set satisfaction-B ((wellness-evaluation-B + environmental-quality-evaluation-B + comfort-evaluation-B + prestige-evaluation-B + participation-evaluation-B) / 5)
    
    ;choose the behaviour with the highest satisfaction
    set satisfaction  max (list satisfaction-A satisfaction-B)
    ;; green -> A || red -> B
    ifelse satisfaction = satisfaction-A [set behavior "A" set color green] [set behavior "B" set color red]
    
    ;set dissonance threshold
    set dissonance-tolerance Random-Normal-Trunc 0.5 0.14 0 1
    
    ;social network values
    set age (item 2 citizen-data)
    ifelse (item 4 citizen-data) = 1 [set gender "male"] [set gender "female"]
    set education-level (item 45 citizen-data)
    ifelse (item 5 citizen-data) = 1 [
      set economic-activity  "employed"
      ][ifelse (item 6 citizen-data) = 1 [
        set economic-activity  "unemployed"
        ][ifelse (item 7 citizen-data) = 1 [
          set economic-activity  "inactive"
          ][if(item 8 citizen-data) = 1 [
            set economic-activity  "student"
          ]
        ]
      ]  
    ]
    set simulated  0
    set years-neighborhood (item 10 citizen-data)
    set house-owner (item 9 citizen-data)
    set numFriends (item 52 citizen-data)
    set children? (item 53 citizen-data) ;scenario-2c
    set section one-of ["0801910059" "0801910056" "0801910068" "0801910073" "0801910058" "0801910064" "0801910062" "0801910070" "0801910066" "0801910075" "0801910069" "0801910065" "0801910057" "0801910074" "0801910072" "0801910067" "0801910060" "0801910061" "0801910071" "0801910063"]
  ] 
end

to Make-Simulated-Population [sectionDem]
  let section-code remove-item 0 (item 4 sectionDem) 
  let cusec (word "0801910" section-code )
  let max-citizen-section  (item 5 sectionDem)
  let humats-section humats with [section = cusec]
  set max-citizen-section  max-citizen-section - count(humats-section)
  let male-citizen (item 6 sectionDem) + (item 7 sectionDem)
  let female-citizen (item 8 sectionDem) + (item 9 sectionDem)
  ;create male over  65
  let male-over-65 (item 7 sectionDem) / 1
  create-humats male-over-65 [
    set gender  "male"
    set age  random 36 + 65
    set simulated 1
    set section cusec
    ;
    Education-Level-Distribution ((item 10 sectionDem) / male-citizen) ((item 12 sectionDem) / male-citizen)
    Economic-Activity-Distribution 0.04 0 0.96
    set years-neighborhood Time-In-Neighborhood 0 0.22 0.36
    set house-owner Owner-Prob 0.77
    
    ;set dissonance threshold
    set dissonance-tolerance Random-Normal-Trunc 0.5 0.14 0 1 
  ]
  ;create female over  65
  let female-over-65 (item 9 sectionDem) / 1
  create-humats female-over-65 [
    set gender  "female"
    set age  random 36 + 65
    set simulated 1
    set section cusec
    ;
    Education-Level-Distribution ((item 11 sectionDem) / female-citizen) ((item 13 sectionDem) / female-citizen)
    Economic-Activity-Distribution 0 0.08 0.92
    set years-neighborhood Time-In-Neighborhood 0.12 0 0.4
    set house-owner Owner-Prob 0.8
    
    ;set dissonance threshold
    set dissonance-tolerance Random-Normal-Trunc 0.5 0.14 0 1 
  ]
  
  ;create male under 65
  let male-under-65 (item 6 sectionDem) / 1
  
  create-humats male-under-65 [
    set gender  "male"
    set age  random 46 + 18 
    set simulated 1
    set section cusec
    ;
    Education-Level-Distribution ((item 10 sectionDem) / male-citizen) ((item 12 sectionDem) / male-citizen)
    Economic-Activity-Distribution 0.80 0.09 0.07
    set years-neighborhood Time-In-Neighborhood 0.17 0.45 0.28
    set house-owner Owner-Prob 0.62
    
    ;set dissonance threshold
    set dissonance-tolerance Random-Normal-Trunc 0.5 0.14 0 1 
  ]
  
  ;create female under 65
  let female-under-65 (item 8 sectionDem) / 1
  
  create-humats male-under-65 [
    set gender  "female"
    set age  random 46 + 18 
    set simulated 1
    set section cusec
    ;
    Education-Level-Distribution ((item 11 sectionDem) / female-citizen) ((item 13 sectionDem) / female-citizen)
    Economic-Activity-Distribution 0.66 0.2 0.05
    set years-neighborhood Time-In-Neighborhood 0.11 0.41 0.35
    set house-owner Owner-Prob 0.6

    ;set dissonance threshold
    set dissonance-tolerance Random-Normal-Trunc 0.5 0.14 0 1 
  ]
  
  ask humats with [simulated = 1] [
    ;reference humat
    let copy  nobody
    set copy Population-Group years-neighborhood house-owner education-level age gender economic-activity
    ;copy the reference humat
    Copy-Needs copy
    ;choose the behaviour with the highest satisfaction
    set satisfaction  max (list satisfaction-A satisfaction-B)
    ;; green -> A || red -> B
    ifelse satisfaction = satisfaction-A [set behavior "A" set color green] [set behavior "B" set color red]
  ]
end

to Make-Critical-Node [name node-scope loc trust-type-string]
  create-critical-nodes 1[
    set node-type name
    set scope round(node-scope / 100 * (count humats))
    set location remove-item 0 loc
    set trust-type trust-type-string
  ]
end
;<summary>
;create the critical nodes
;</summary>
to Make-Critical-Nodes
  ;read the critical node csv and make the critical node turtles
  file-open critical-nodes-config
  ;ignore first row
  let row (csv:from-row file-read-line ";")
  while [ not file-at-end? ] [
    set row (csv:from-row file-read-line ";")
    Make-Critical-Node item 0 row item 1 row (word item 2 row) item 3 row
    ]
  file-close
  
  ;set, place, color, shape and size of critical nodes
  ask critical-nodes[
    set shape "building institution"
    let loc-patches patches with [ district-id = [location] of myself]
    move-to one-of loc-patches
    set size 2
    set color white
  ]
end

;<summary>
;Place the citizen in a patch of his section, prioritizing the empty patches
;</summary>
to Place-Citizen
  ask humats [
    let empty-patches patches with [ not any? turtles-here and district-id = [section] of myself]
    if not any? empty-patches [
      set empty-patches patches with [ district-id = [section] of myself]
    ]
    move-to one-of empty-patches
  ]
end

;<summary>
;create the strategy-manager
;</summary>
to Make-Strategy-Manager
  create-strategy-managers 1
  ask strategy-managers[
    hide-turtle
    set strategies-list [] 
    ifelse scenario-1 [
      ;real timeline strategies
      file-open "scenario1.csv"
    ] 
    [
      ifelse scenario-2 [
        file-open "scenario2.csv"
      ] [
        ifelse scenario-3 [
          file-open "scenario3-strategies.csv"
        ][
          ;real timeline strategies
          file-open strategies-table
        ] 
      ]  
    ]
    ;ignore first row
    let row (csv:from-row file-read-line ";")
    while [ not file-at-end? ] [
      set row (csv:from-row file-read-line ";")
      ;map a strategy file row to a more simple representation
      let focus-list Split item 9 row
      set strategies-list Make-Strategy-List row focus-list
    ]
    file-close
    show strategies-list
  ]
end

;<summary>
;Map a strategy row in a mensual strategy format
;row, is the row of the strategy file, which contains the parameters of a critical node strategy
;</summary>
to-report Make-Strategy-List[row focus-list]
  let starting-year item 3 row
  let ending-year item 5 row
  let months 0
  let years 0

  ifelse starting-year  > ending-year[
    print("The strategy table is wrong: ending year must be equal to or greater than starting year")
  ][
    ;years that the strategy lasts
    set years ending-year - starting-year
  ]
  let ending-month item 4 row + (years * 12) ;ending month is ending-month + years in months
  ;strategy duration in months
  let duration ending-month - item 2 row ;ending-month - starting-month
  
  ;current-mont starts in the starting-month
  let current-month item 2 row
  ;new strategy row
  let newrow []
  ;make a new strategy row for every month of the original strategy
  while [current-month <= ending-month][
    let new-starting-year starting-year + floor (current-month / 12)
    let new-starting-month (current-month mod 12)
    ;fix problem with the 12 mod 12 situation
    if new-starting-month = 0 [
      ;if new-stating-month = 0 in fact is the 12º month
      set new-starting-month 12
      ;and there is not new year yet!
      set new-starting-year new-starting-year - 1
    ]
    ;make the new row with the original values and the new stating month/year
    set newrow (list (item 0 row) (item 1 row) (new-starting-month) (new-starting-year) (item 6 row)  (item 7 row) (item 8 row) focus-list)
    ;add the new row to the list  critical-node-name behavior starting-month starting-year frecuency reach secondary-critical-node-name focus
    set strategies-list lput newrow strategies-list
    ;increment loop
    set current-month current-month + 1
  ]
  report strategies-list
end

to-report Population-Group [ time-sim owner-sim education-sim age-sim gender-sim employed-sim]
  ;implementar el arbol
  ;right branch (node time in neighborhood)
  ifelse time-sim >= 4  [
    set children? Children-Prob 0.0667
    report one-of humats with [(simulated = 0) and (years-neighborhood >= 4)]
  ][
    ;left branch (node live in neighborhood)
    ;rigth branch (house owner)
    ifelse owner-sim = "1"[
      ;right branch (education level)
      ifelse education-sim = 3[
        ;right branch (employed)
        ifelse employed-sim = "employed"[
          ;right branch (age)
          ifelse age >= 45 [
            set children? Children-Prob 0.48
            report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level = 3) and (economic-activity = "employed") and (age >= 45)]
          ][
            ;left branch (age)
            set children? Children-Prob 0.7143
            report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level = 3) and (economic-activity = "employed") and (age < 45)]
          ]
        ][
          ;left branch (employed)
          set children? Children-Prob 0.1579
          report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level = 3) and (economic-activity != "employed")]
        ]
      ][
        ;left branch (education level)  
        ifelse age >= 45 [
          ;right branch (age)
          
          ifelse gender = "female"[
            ;right branch (gender) 
            set children? Children-Prob 0.0833
            report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level < 3) and (age >= 45) and (gender = "female")]
          ][
            ;left branch (gender) 
            set children? Children-Prob 0.2631
            report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level < 3) and (age >= 45) and (gender = "male")]
          ]
        ][
          ;left branch (age)
          set children? Children-Prob 0.4444
          report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 1) and (education-level < 3) and (age < 45)]
        ]
      ]
    ][
      ;left branch (house owner)
      set children? Children-Prob 0.4235
      report one-of humats with [(simulated = 0) and (years-neighborhood < 4) and (house-owner = 0)]
    ]
  ]
end

to Copy-Needs [copy]
  ;importances
  set wellness-importance [wellness-importance] of copy
  set environmental-quality-importance [environmental-quality-importance] of copy
  set comfort-importance [comfort-importance ] of copy
  set prestige-importance [prestige-importance] of copy
  set participation-importance [participation-importance] of copy
  set social-importance [social-importance] of copy
  if social-importance = 0 [show copy]
  
  ;satisfactions
  set wellness-satisfaction-A [wellness-satisfaction-A] of copy
  set environmental-quality-satisfaction-A [environmental-quality-satisfaction-A] of copy
  set comfort-satisfaction-A [comfort-satisfaction-A] of copy
  set prestige-satisfaction-A  [prestige-satisfaction-A ] of copy
  set participation-satisfaction-A [participation-satisfaction-A] of copy
  
  set wellness-satisfaction-B [wellness-satisfaction-B] of copy
  set environmental-quality-satisfaction-B [environmental-quality-satisfaction-B] of copy
  set comfort-satisfaction-B [comfort-satisfaction-B] of copy
  set prestige-satisfaction-B  [prestige-satisfaction-B ] of copy
  set participation-satisfaction-B [participation-satisfaction-B] of copy
  
  ;influence parameters
  set friends-trust [friends-trust] of copy
  set adjacents-trust [adjacents-trust] of copy
  set city-council-trust [city-council-trust] of copy
  set local-media-trust [local-media-trust] of copy
  set merchants-associations-trust [merchants-associations-trust] of copy
  set other-associations-trust [other-associations-trust] of copy
  set original-local-media-trust local-media-trust
  set original-merchants-associations-trust merchants-associations-trust
  set original-other-associations-trust other-associations-trust
  set political-opposition-trust [political-opposition-trust] of copy
  
  ;evaluations
  set wellness-evaluation-A [wellness-evaluation-A] of copy
  set environmental-quality-evaluation-A [environmental-quality-evaluation-A] of copy
  set comfort-evaluation-A [comfort-evaluation-A ] of copy
  set prestige-evaluation-A [prestige-evaluation-A] of copy
  set participation-evaluation-A [participation-evaluation-A] of copy
  
  set wellness-evaluation-B [wellness-evaluation-B] of copy
  set environmental-quality-evaluation-B [environmental-quality-evaluation-B] of copy
  set comfort-evaluation-B [comfort-evaluation-B ] of copy
  set prestige-evaluation-B [prestige-evaluation-B] of copy
  set participation-evaluation-B [participation-evaluation-B] of copy
  
  set satisfaction-A [satisfaction-A] of copy
  set satisfaction-B [satisfaction-B] of copy
  
  set numFriends [numFriends] of copy

end

to Economic-Activity-Distribution [prob-employed prob-umemployed prob-inactive]
  ;economic activity based on demographic distribution
  let rnumber  random-float 1
  ifelse rnumber <=  prob-employed[
    set economic-activity  "employed"
  ][
    ifelse rnumber <= (prob-employed + prob-umemployed) [
      set economic-activity  "unemployed"
    ][
      ifelse rnumber <= (prob-employed + prob-umemployed + prob-inactive )[
        set economic-activity  "inactive"
      ]
      [
        set economic-activity  "student"
      ]
    ]
  ] 
end

to Education-Level-Distribution [low-prob medium-prob ]
  ;education level based on demographic distribution
    let rnumber  random-float 1
    ifelse rnumber <=  low-prob[
      set education-level  "1"
    ][
      ifelse rnumber <= (low-prob + medium-prob)[
        set education-level  "2"
      ][
        set education-level  "3"
      ]
    ]
end
to-report Time-in-Neighborhood [prob-one prob-two prob-three]
  let rnumber  random-float 1
  ifelse rnumber <=  prob-one [
    report 1
  ][
    ifelse rnumber <=  (prob-one + prob-two)[
      report 2
    ][
      ifelse rnumber <=  (prob-one + prob-two + prob-three)[
        report 3
      ][
        report 4
      ]
    ]
  ]
end
to-report Owner-Prob [prob]
  let rnumber  random-float 1
  ifelse rnumber <=  prob [
    report 1
  ][
    report 0
  ]
end

to-report Children-Prob [prob]
  let rnumber  random-float 1
  ifelse rnumber <=  prob [
    report 1
  ][
    report 0
  ]
end